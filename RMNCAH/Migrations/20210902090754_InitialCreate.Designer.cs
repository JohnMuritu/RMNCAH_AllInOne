// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RMNCAH_api.Data;

namespace RMNCAH.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20210902090754_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("RMNCAH_api.Models.Client.ClientClinicalDetails", b =>
                {
                    b.Property<Guid>("ClientClinicalDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("client_clinical_details_id");

                    b.Property<string>("BabyName")
                        .HasColumnType("text")
                        .HasColumnName("baby_name");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<DateTime?>("anc1")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("anc1");

                    b.Property<DateTime?>("anc2")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("anc2");

                    b.Property<DateTime?>("anc3")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("anc3");

                    b.Property<DateTime?>("anc4")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("anc4");

                    b.Property<DateTime?>("anc5")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("anc5");

                    b.Property<int?>("delivery")
                        .HasColumnType("integer")
                        .HasColumnName("delivery");

                    b.Property<DateTime?>("deliveryDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("delivery_date");

                    b.Property<DateTime?>("edd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edd");

                    b.Property<DateTime?>("mr1")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("mr1");

                    b.Property<DateTime?>("penta1")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("penta1");

                    b.Property<DateTime?>("penta2")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("penta2");

                    b.Property<DateTime?>("penta3")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("penta3");

                    b.Property<int?>("remarksChild")
                        .HasColumnType("integer")
                        .HasColumnName("remarks_child");

                    b.Property<DateTime?>("remarksChildDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("remarks_child_date");

                    b.Property<int?>("remarksParent")
                        .HasColumnType("integer")
                        .HasColumnName("remarks_parent");

                    b.Property<DateTime?>("remarksParentDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("remarks_parent_date");

                    b.HasKey("ClientClinicalDetailsId")
                        .HasName("pk_client_clinical_details");

                    b.HasIndex("delivery")
                        .HasDatabaseName("ix_client_clinical_details_delivery");

                    b.HasIndex("remarksChild")
                        .HasDatabaseName("ix_client_clinical_details_remarks_child");

                    b.HasIndex("remarksParent")
                        .HasDatabaseName("ix_client_clinical_details_remarks_parent");

                    b.ToTable("client_clinical_details");
                });

            modelBuilder.Entity("RMNCAH_api.Models.Client.ClientDetails", b =>
                {
                    b.Property<Guid>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<string>("AlternativePhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("alternative_phone_number");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dob");

                    b.Property<string>("FullNames")
                        .HasColumnType("text")
                        .HasColumnName("full_names");

                    b.Property<string>("HIVStatusKnown")
                        .HasColumnType("text")
                        .HasColumnName("hiv_status_known");

                    b.Property<string>("OtherHFAttended")
                        .HasColumnType("text")
                        .HasColumnName("other_hf_attended");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<string>("Village")
                        .HasColumnType("text")
                        .HasColumnName("village");

                    b.Property<int>("chv_id")
                        .HasColumnType("integer")
                        .HasColumnName("chv_id");

                    b.Property<string>("deptClientId")
                        .HasColumnType("text")
                        .HasColumnName("dept_client_id");

                    b.Property<int>("mfl_code")
                        .HasColumnType("integer")
                        .HasColumnName("mfl_code");

                    b.Property<string>("testDone")
                        .HasColumnType("text")
                        .HasColumnName("test_done");

                    b.HasKey("ClientId")
                        .HasName("pk_client_details");

                    b.HasIndex("chv_id")
                        .HasDatabaseName("ix_client_details_chv_id");

                    b.HasIndex("mfl_code")
                        .HasDatabaseName("ix_client_details_mfl_code");

                    b.ToTable("client_details");
                });

            modelBuilder.Entity("RMNCAH_api.Models.Reports.ClientDetailsAndClinicalData", b =>
                {
                    b.Property<Guid>("ClientClinicalDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("client_clinical_details_id");

                    b.Property<double>("Age")
                        .HasColumnType("double precision")
                        .HasColumnName("age");

                    b.Property<string>("AlternativePhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("alternative_phone_number");

                    b.Property<string>("BabyName")
                        .HasColumnType("text")
                        .HasColumnName("baby_name");

                    b.Property<string>("FullNames")
                        .HasColumnType("text")
                        .HasColumnName("full_names");

                    b.Property<string>("HFLinked")
                        .HasColumnType("text")
                        .HasColumnName("hf_linked");

                    b.Property<string>("OtherHFAttended")
                        .HasColumnType("text")
                        .HasColumnName("other_hf_attended");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("Village")
                        .HasColumnType("text")
                        .HasColumnName("village");

                    b.Property<DateTime?>("anc1")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("anc1");

                    b.Property<DateTime?>("anc2")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("anc2");

                    b.Property<DateTime?>("anc3")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("anc3");

                    b.Property<DateTime?>("anc4")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("anc4");

                    b.Property<DateTime?>("anc5")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("anc5");

                    b.Property<string>("chvName")
                        .HasColumnType("text")
                        .HasColumnName("chv_name");

                    b.Property<string>("delivery")
                        .HasColumnType("text")
                        .HasColumnName("delivery");

                    b.Property<string>("deptClientId")
                        .HasColumnType("text")
                        .HasColumnName("dept_client_id");

                    b.Property<DateTime?>("edd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edd");

                    b.Property<DateTime?>("mr1")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("mr1");

                    b.Property<DateTime?>("penta1")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("penta1");

                    b.Property<DateTime?>("penta2")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("penta2");

                    b.Property<DateTime?>("penta3")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("penta3");

                    b.Property<string>("remarks_child")
                        .HasColumnType("text")
                        .HasColumnName("remarks_child");

                    b.Property<string>("remarks_parent")
                        .HasColumnType("text")
                        .HasColumnName("remarks_parent");

                    b.HasKey("ClientClinicalDetailsId")
                        .HasName("pk_client_details_and_clinical_report_data");

                    b.ToTable("client_details_and_clinical_report_data");
                });

            modelBuilder.Entity("RMNCAH_api.Models.Reports.ClinicalAggregatedSummary", b =>
                {
                    b.Property<int>("total_anc1")
                        .HasColumnType("integer")
                        .HasColumnName("total_anc1");

                    b.Property<int>("total_anc2")
                        .HasColumnType("integer")
                        .HasColumnName("total_anc2");

                    b.Property<int>("total_anc3")
                        .HasColumnType("integer")
                        .HasColumnName("total_anc3");

                    b.Property<int>("total_anc4")
                        .HasColumnType("integer")
                        .HasColumnName("total_anc4");

                    b.Property<int>("total_anc5")
                        .HasColumnType("integer")
                        .HasColumnName("total_anc5");

                    b.Property<int>("total_edd")
                        .HasColumnType("integer")
                        .HasColumnName("total_edd");

                    b.Property<int>("total_mr1")
                        .HasColumnType("integer")
                        .HasColumnName("total_mr1");

                    b.Property<int>("total_penta1")
                        .HasColumnType("integer")
                        .HasColumnName("total_penta1");

                    b.Property<int>("total_penta2")
                        .HasColumnType("integer")
                        .HasColumnName("total_penta2");

                    b.Property<int>("total_penta3")
                        .HasColumnType("integer")
                        .HasColumnName("total_penta3");

                    b.ToTable("clinical_aggregated_summary");
                });

            modelBuilder.Entity("RMNCAH_api.Models.Reports.Defaulters", b =>
                {
                    b.Property<Guid>("ClientClinicalDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("client_clinical_details_id");

                    b.Property<string>("delivery")
                        .HasColumnType("text")
                        .HasColumnName("delivery");

                    b.Property<DateTime?>("delivery_date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("delivery_date");

                    b.Property<string>("delivery_defaulter")
                        .HasColumnType("text")
                        .HasColumnName("delivery_defaulter");

                    b.Property<string>("dept_client_id")
                        .HasColumnType("text")
                        .HasColumnName("dept_client_id");

                    b.Property<DateTime?>("edd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edd");

                    b.Property<string>("facility_name")
                        .HasColumnType("text")
                        .HasColumnName("facility_name");

                    b.Property<string>("full_names")
                        .HasColumnType("text")
                        .HasColumnName("full_names");

                    b.Property<DateTime?>("mr1")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("mr1");

                    b.Property<string>("mr1_defaulter")
                        .HasColumnType("text")
                        .HasColumnName("mr1_defaulter");

                    b.Property<DateTime?>("penta1")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("penta1");

                    b.Property<string>("penta1_defaulter")
                        .HasColumnType("text")
                        .HasColumnName("penta1_defaulter");

                    b.Property<DateTime?>("penta3")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("penta3");

                    b.Property<string>("penta3_defaulter")
                        .HasColumnType("text")
                        .HasColumnName("penta3_defaulter");

                    b.HasKey("ClientClinicalDetailsId")
                        .HasName("pk_defaulters");

                    b.ToTable("defaulters");
                });

            modelBuilder.Entity("RMNCAH_api.Models.Security.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = "2bb88694-a613-4cb1-b540-61b86713a098",
                            ConcurrencyStamp = "c9d8f1ad-2eb7-4ab8-a9ab-c98fe3d97c8b",
                            Name = "ADMIN",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "83c56cc9-b22e-415d-b836-1080c8be8e2f",
                            ConcurrencyStamp = "750ac99b-c156-47cd-9261-a3b76f4787f7",
                            Name = "REPORT",
                            NormalizedName = "REPORT"
                        },
                        new
                        {
                            Id = "524b2daf-6a49-4492-8a05-d2269454507f",
                            ConcurrencyStamp = "bc3a9dfb-b83c-4c5a-84fe-41301cf6929d",
                            Name = "USER",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("RMNCAH_api.Models.Security.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_claims_role_id");

                    b.ToTable("role_claims");
                });

            modelBuilder.Entity("RMNCAH_api.Models.Security.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<int>("ChangePassword")
                        .HasColumnType("integer")
                        .HasColumnName("change_password");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("JobTitle")
                        .HasColumnType("text")
                        .HasColumnName("job_title");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = "46ba742f-f729-4bb3-81f3-ad4e07c9cd30",
                            AccessFailedCount = 0,
                            Active = true,
                            ChangePassword = 0,
                            ConcurrencyStamp = "588ae84b-0124-4cc0-ac66-634b2ad67f42",
                            Email = "admin@myemail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            JobTitle = "System Administrator",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MYEMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEAvg9aHyAi9arSWNlmRXPZGefFVa7PSyApTuJ2WmI3f1eQacq5sZCsp4a0kxqvTWYA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("RMNCAH_api.Models.Security.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_claims_user_id");

                    b.ToTable("user_claims");
                });

            modelBuilder.Entity("RMNCAH_api.Models.Security.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_logins_user_id");

                    b.ToTable("user_logins");
                });

            modelBuilder.Entity("RMNCAH_api.Models.Security.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_roles_role_id");

                    b.ToTable("user_roles");

                    b.HasData(
                        new
                        {
                            UserId = "46ba742f-f729-4bb3-81f3-ad4e07c9cd30",
                            RoleId = "2bb88694-a613-4cb1-b540-61b86713a098"
                        });
                });

            modelBuilder.Entity("RMNCAH_api.Models.Security.UserSignUpResource", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("JobTitle")
                        .HasColumnType("text")
                        .HasColumnName("job_title");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.Property<string>("UserRole")
                        .HasColumnType("text")
                        .HasColumnName("user_role");

                    b.HasKey("UserId")
                        .HasName("pk_user_sign_up_resource");

                    b.ToTable("user_sign_up_resource");
                });

            modelBuilder.Entity("RMNCAH_api.Models.Security.UserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_tokens");

                    b.ToTable("user_tokens");
                });

            modelBuilder.Entity("RMNCAH_api.Models.Utils.AdultRemarksOptions", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("option")
                        .HasColumnType("text")
                        .HasColumnName("option");

                    b.HasKey("id")
                        .HasName("pk_adult_remarks_options");

                    b.ToTable("adult_remarks_options");

                    b.HasData(
                        new
                        {
                            id = 1,
                            option = "Abortion"
                        },
                        new
                        {
                            id = 2,
                            option = "Miscarriage"
                        },
                        new
                        {
                            id = 3,
                            option = "Still birth"
                        },
                        new
                        {
                            id = 4,
                            option = "Maternal death"
                        });
                });

            modelBuilder.Entity("RMNCAH_api.Models.Utils.ChildRemarksOptions", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("option")
                        .HasColumnType("text")
                        .HasColumnName("option");

                    b.HasKey("id")
                        .HasName("pk_child_remarks_options");

                    b.ToTable("child_remarks_options");

                    b.HasData(
                        new
                        {
                            id = 1,
                            option = "Child death"
                        });
                });

            modelBuilder.Entity("RMNCAH_api.Models.Utils.Chvs", b =>
                {
                    b.Property<int>("chv_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("chv_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("active")
                        .HasColumnType("text")
                        .HasColumnName("active");

                    b.Property<string>("chv_name")
                        .HasColumnType("text")
                        .HasColumnName("chv_name");

                    b.HasKey("chv_id")
                        .HasName("pk_chvs");

                    b.ToTable("chvs");
                });

            modelBuilder.Entity("RMNCAH_api.Models.Utils.DeliveryOptions", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("option")
                        .HasColumnType("text")
                        .HasColumnName("option");

                    b.HasKey("id")
                        .HasName("pk_delivery_options");

                    b.ToTable("delivery_options");

                    b.HasData(
                        new
                        {
                            id = 1,
                            option = "SBA"
                        },
                        new
                        {
                            id = 2,
                            option = "HD (home delivery)"
                        },
                        new
                        {
                            id = 3,
                            option = "BBA(Born before arrival)"
                        });
                });

            modelBuilder.Entity("RMNCAH_api.Models.Utils.HealthFacilities", b =>
                {
                    b.Property<int>("MFLCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("mfl_code")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FacilityName")
                        .HasColumnType("text")
                        .HasColumnName("facility_name");

                    b.HasKey("MFLCode")
                        .HasName("pk_health_facilities");

                    b.ToTable("health_facilities");
                });

            modelBuilder.Entity("RMNCAH_api.Models.Client.ClientClinicalDetails", b =>
                {
                    b.HasOne("RMNCAH_api.Models.Utils.DeliveryOptions", "deliveryOptions")
                        .WithMany()
                        .HasForeignKey("delivery")
                        .HasConstraintName("fk_client_clinical_details_delivery_options_delivery");

                    b.HasOne("RMNCAH_api.Models.Utils.ChildRemarksOptions", "ChildRemarksOptions")
                        .WithMany()
                        .HasForeignKey("remarksChild")
                        .HasConstraintName("fk_client_clinical_details_child_remarks_options_remarks_child");

                    b.HasOne("RMNCAH_api.Models.Utils.AdultRemarksOptions", "AdultRemarksOptions")
                        .WithMany()
                        .HasForeignKey("remarksParent")
                        .HasConstraintName("fk_client_clinical_details_adult_remarks_options_remarks_parent");

                    b.Navigation("AdultRemarksOptions");

                    b.Navigation("ChildRemarksOptions");

                    b.Navigation("deliveryOptions");
                });

            modelBuilder.Entity("RMNCAH_api.Models.Client.ClientDetails", b =>
                {
                    b.HasOne("RMNCAH_api.Models.Utils.Chvs", "chv")
                        .WithMany()
                        .HasForeignKey("chv_id")
                        .HasConstraintName("fk_client_details_chvs_chv_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RMNCAH_api.Models.Utils.HealthFacilities", "HFLinked")
                        .WithMany()
                        .HasForeignKey("mfl_code")
                        .HasConstraintName("fk_client_details_health_facility_mfl_code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("chv");

                    b.Navigation("HFLinked");
                });

            modelBuilder.Entity("RMNCAH_api.Models.Security.RoleClaim", b =>
                {
                    b.HasOne("RMNCAH_api.Models.Security.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_role_claims_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RMNCAH_api.Models.Security.UserClaim", b =>
                {
                    b.HasOne("RMNCAH_api.Models.Security.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_claims_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RMNCAH_api.Models.Security.UserLogin", b =>
                {
                    b.HasOne("RMNCAH_api.Models.Security.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_logins_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RMNCAH_api.Models.Security.UserRole", b =>
                {
                    b.HasOne("RMNCAH_api.Models.Security.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_user_roles_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RMNCAH_api.Models.Security.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_roles_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RMNCAH_api.Models.Security.UserToken", b =>
                {
                    b.HasOne("RMNCAH_api.Models.Security.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_tokens_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
